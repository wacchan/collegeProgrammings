// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   EncapsulatedContinuousLinearDynamicSystem.java

package systems09;

import java.util.logging.*;
import org.mklab.nfc.matrix.DoubleMatrix;
import org.mklab.nfc.matrix.Matrix;
import org.mklab.tool.control.LinearSystem;
import org.mklab.tool.control.LinearSystemFactory;
import org.mklab.tool.control.system.continuous.ContinuousLinearDynamicSystem;

public class EncapsulatedContinuousLinearDynamicSystem extends ContinuousLinearDynamicSystem
{
    class JamoxLogHandler extends Handler
    {

        public void close()
            throws SecurityException
        {
        }

        public void flush()
        {
        }

        public void publish(LogRecord record)
        {
            String transferFunctionAction = "\u4F1D\u9054\u95A2\u6570\u3092\u6C42\u3081\u307E\u3059\u3002";
            String stateSpaceAction = "(\u5165\u529B\u30CE\u30FC\u30C9\u304B\u3089\u51FA\u529B\u30CE\u30FC\u30C9\u307E\u3067\u306E\u30D1\u30B9\u306B\u5BFE\u5FDC\u3059\u308B)\u72B6\u614B\u7A7A\u9593\u8868\u73FE(\u6570\u5024)\u3092\u6C42\u3081\u307E\u3059\u3002";
            String message = record.getMessage();
            if(message.equals("\u4F1D\u9054\u95A2\u6570\u3092\u6C42\u3081\u307E\u3059\u3002") || message.equals("(\u5165\u529B\u30CE\u30FC\u30C9\u304B\u3089\u51FA\u529B\u30CE\u30FC\u30C9\u307E\u3067\u306E\u30D1\u30B9\u306B\u5BFE\u5FDC\u3059\u308B)\u72B6\u614B\u7A7A\u9593\u8868\u73FE(\u6570\u5024)\u3092\u6C42\u3081\u307E\u3059\u3002"))
                requiredTransferFunction = true;
        }

        final EncapsulatedContinuousLinearDynamicSystem this$0;

        JamoxLogHandler()
        {
            this$0 = EncapsulatedContinuousLinearDynamicSystem.this;
            super();
        }
    }


    public EncapsulatedContinuousLinearDynamicSystem()
    {
        requiredTransferFunction = false;
        addLogHandler();
    }

    private void addLogHandler()
    {
        logger.addHandler(new JamoxLogHandler());
    }

    public LinearSystem getLinearSystem()
    {
        if(requiredTransferFunction)
            return LinearSystemFactory.createConstant(DoubleMatrix.ones(1));
        else
            return super.getLinearSystem();
    }

    public Matrix getA()
    {
        if(requiredTransferFunction)
            return new DoubleMatrix(getStateSize(), getStateSize());
        else
            return super.getA();
    }

    public Matrix getB()
    {
        if(requiredTransferFunction)
            return new DoubleMatrix(getStateSize(), getInputSize());
        else
            return super.getB();
    }

    public Matrix getC()
    {
        if(requiredTransferFunction)
            return new DoubleMatrix(getOutputSize(), getStateSize());
        else
            return super.getC();
    }

    public Matrix getD()
    {
        if(requiredTransferFunction)
        {
            requiredTransferFunction = false;
            return DoubleMatrix.unit(getOutputSize(), getInputSize());
        } else
        {
            return super.getD();
        }
    }

    private final Logger logger = Logger.getLogger("jamox");
    boolean requiredTransferFunction;
}
